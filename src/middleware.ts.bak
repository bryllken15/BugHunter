import { createClient } from '@supabase/supabase-js'
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export async function middleware(req: NextRequest) {
  const res = NextResponse.next()
  
  // TEMPORARILY DISABLE MIDDLEWARE FOR TESTING
  // TODO: Re-enable after fixing session detection
  console.log('Middleware - TEMPORARILY DISABLED for testing')
  return res
  
  // Check if Supabase is configured
  // const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
  // const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
  
  // if (!supabaseUrl || !supabaseKey || supabaseUrl?.includes('placeholder')) {
  //   // If Supabase is not configured, allow all routes
  //   return res
  // }

  // // Create Supabase client with proper request/response handling
  // const supabase = createClient(supabaseUrl, supabaseKey, {
  //   auth: {
  //     storageKey: 'sb-kagxizmnfjgcljbvsyzy-auth-token',
  //     persistSession: true,
  //     autoRefreshToken: true,
  //     detectSessionInUrl: true,
  //   },
  // })

  // // Try to get session from cookies first
  // const authHeader = req.headers.get('authorization')
  // const cookieHeader = req.headers.get('cookie')
  
  // console.log('Middleware - Auth Header:', authHeader)
  // console.log('Middleware - Cookie Header:', cookieHeader)

  // const {
  //   data: { session },
  // } = await supabase.auth.getSession()

  // console.log('Middleware - Session:', session ? 'EXISTS' : 'NONE')
  // console.log('Middleware - User:', session?.user?.email || 'N/A')

  // // Protected routes that require authentication
  // const protectedRoutes = ['/dashboard', '/challenges', '/achievements', '/progress', '/onboarding']
  // const authRoutes = ['/login', '/register']

  // const isProtectedRoute = protectedRoutes.some(route => 
  //   req.nextUrl.pathname.startsWith(route)
  // )
  // const isAuthRoute = authRoutes.some(route => 
  //   req.nextUrl.pathname.startsWith(route)
  // )

  // console.log('Middleware - Path:', req.nextUrl.pathname)
  // console.log('Middleware - Is Protected:', isProtectedRoute)
  // console.log('Middleware - Is Auth Route:', isAuthRoute)

  // // Redirect to login if accessing protected route without session
  // if (isProtectedRoute && !session) {
  //   console.log('Middleware - Redirecting to login (no session)')
  //   return NextResponse.redirect(new URL('/login', req.url))
  // }

  // // Redirect to dashboard if accessing auth routes with session
  // if (isAuthRoute && session) {
  //   console.log('Middleware - Redirecting to dashboard (has session)')
  //   return NextResponse.redirect(new URL('/dashboard', req.url))
  // }

  // console.log('Middleware - Allowing request')
  // return res
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - public folder
     */
    '/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',
  ],
}
